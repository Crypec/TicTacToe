// This is an assign function that copies full descriptors
function completeAssign(target, ...sources) {
  sources.forEach(source => {
    let descriptors = Object.keys(source).reduce((descriptors, key) => {
      descriptors[key] = Object.getOwnPropertyDescriptor(source, key);
      return descriptors;
    }, {});
    // by default, Object.assign copies enumerable Symbols too
    Object.getOwnPropertySymbols(source).forEach(sym => {
      let descriptor = Object.getOwnPropertyDescriptor(source, sym);
      if (descriptor.enumerable) {
        descriptors[sym] = descriptor;
      }
    });
    Object.defineProperties(target, descriptors);
  });
  return target;
}




Board.prototype.hasWinner = function() {
{
    let hasWinner = false;
    for (let i = 0; i < this.cells.length; i++) {
      hasWinner |= this.checkRow(i);
    }
    for (let i = 0; i < this.cells.length; i++) {
      hasWinner |= this.checkCol(i);
    }
    // it makes only sense to check the diagonals only if gameBoard is a square
    if (this.cells.length == this.cells[0].length) {
      hasWinner |=
        this.checkDiagLeftToRightDown() || this.checkDiagLeftToRightUp();
    }
    return hasWinner;
  }

};
Board.prototype.checkRow = function(row) {
//  checkRow(row) 
{
    const first = this.cells[row][0];
    if (first == CellState.FREE) return false;
    return !this.cells[row].some((elem) => {
      return first != elem;
    });
 }
};